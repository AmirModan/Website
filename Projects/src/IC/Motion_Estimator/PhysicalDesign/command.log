#@ # 
#@ # Running icc_shell Version O-2018.06-SP4 for linux64 -- Nov 27, 2018
#@ # Date:   Sun Dec 20 17:26:06 2020
#@ # Run by: engr852-10@hafez.sfsu.edu
#@ 

source -echo -verbose /courses/engr852/engr852-10/asic_flow_setup/pnr/pnr_project/scripts/physical_design_icc.tcl
#@ # -- Starting source /courses/engr852/engr852-10/asic_flow_setup/pnr/pnr_project/scripts/physical_design_icc.tcl

#@ ###########################################################################
#@ ### Inital design setup
#@ ###########################################################################
#@ 
#@ #gui_start
#@ 
#@ 
#@ source ../../lib_gen/lib_container.tcl
#@ # -- Starting source ../../lib_gen/lib_container.tcl

#@ set link_library  [ list * /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ff0p95v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ff0p95v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ff0p95vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_tt0p85v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_tt0p85v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_tt0p85vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ff0p95v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ff0p95v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ff0p95vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_tt0p85v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_tt0p85v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_tt0p85vn40c.db ]
#@ set target_library  [list /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_hvt/db_ccs/saed32hvt_ss0p75vn40c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75v125c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75v25c.db /packages/process_kit/generic/generic_32nm/SAED32_EDK/lib/stdcell_lvt/db_ccs/saed32lvt_ss0p75vn40c.db ]
#@ # -- End source ../../lib_gen/lib_container.tcl

#@ 
#@ 
#@ ##dont use from lvt
#@ ##set_dont_use {saed32lvt_ss0p85v125c/AO22X*_LVT \ 
#@ ##               saed32lvt_ss0p85v125c/INVX1_LVT \ 
#@ ##              saed32lvt_ss0p85v125c/IBUFF*_LVT ##	      saed32lvt_ss0p85v125c/AOI22X1_LVT}
#@ 
#@ ##dont use from hvt
#@ ##set_dont_use {saed32hvt_ss0p85v125c/NAND2X*_HVT \ 
#@ ##               saed32hvt_ss0p85v125c/AOI21X1_HVT \ 
#@ ##              saed32hvt_ss0p85v125c/IBUFF*_HVT ##	      saed32hvt_ss0p85v125c/MUX*_HVT}
#@ 
#@ 
#@ set mw_logic0_net VSS
#@ set mw_logic1_net VDD
#@ 
#@ set_tlu_plus_files -max_tluplus /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_1p9m_Cmax.tluplus -min_tluplus /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_1p9m_Cmin.tluplus  -tech2itf_map /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_tf_itf_tluplus.map
#@ 
#@ create_mw_lib -technology /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/milkyway/saed32nm_1p9m_mw.tf -mw_reference_library {/packages/process_kit/generic/generic_32nm/EDK_updated_april2012/SAED32_EDK/lib/stdcell_lvt/milkyway/saed32nm_lvt_1p9m /packages/process_kit/generic/generic_32nm/EDK_updated_april2012/SAED32_EDK/lib/stdcell_hvt/milkyway/saed32nm_hvt_1p9m} Project_design.mw 
#@ 
#@ open_mw_lib Project_design.mw
#@ 
#@ read_verilog ../../dc_synth/synth_Project/output/gc_HDL.v
#@ 
#@ current_design Project
#@ 
#@ uniquify_fp_mw_cel
#@ 
#@ link
#@ 
#@ read_sdc ../../dc_synth/synth_Project/const/Project.sdc
#@ # -- Starting source /packages/synopsys/icc/O-2018.06-SP4/auxx/syn/all_command_option_def.tcl

#@ define_proc_attributes all_physical_only_cells -info "Get the collection of physical only cells" -define_args {
#@ { -coordinates "coordinates of bounding box" "llx lly urx ury" string {optional}} 
#@ { -lib_cells "get cells related to these objects" "objects" list {optional}} 
#@ { -cell_name "list of cell name patterns and collections" "patterns" list {optional}} 
#@ { "" "Existing collection" "arguments" list {optional}} 
#@ }
#@ define_proc_attributes all_physical_only_nets  -info "Get the collection of physical only nets" -define_args {
#@ { "" "list of cell name patterns and collections" "arguments" list {optional}} 
#@ } 
#@ define_proc_attributes all_drc_violated_nets -info "Returns all DRC violated nets" -define_args { 
#@ { -max_capacitance "max Cap DRC violated nets" "" string {optional}} 
#@ { -max_transition "max transition time DRC violated nets" "" string {optional}} 
#@ { -max_fanout "max fanout DRC violated nets" "" string {optional}}
#@ { -threshold "Captures all values more than or equal to threshold" "threshold" string {optional}} 
#@ { -bound "Captures all values less than or equal to bound bound" "upper" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments"  list {optional}} 
#@ }
#@ define_proc_attributes all_fanin -info "return pins or cells in transitive fanin" -define_args { 
#@ { -to "set of sink ports, pins, or nets" "sink_list" list {optional}} 
#@ { -startpoints_only  "return only the timing startpoints" "" string {optional}} 
#@ { -exclude_bboxes "black-boxes are not included in return-set" "" string {optional}} 
#@ { -break_on_bboxes  "traversal stops at black-boxes" "" string {optional}} 
#@ { -only_cells "only cells are included in the return-set" "" string {optional}} 
#@ { -flat "trace entire design instead of just current hierarchy" "" string {optional}} 
#@ { -levels "maximum number of levels of logic to traverse" "n" string {optional}} 
#@ { -trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_high_fanout -info "Returns all high fanout objects" -define_args { 
#@ { -nets "high fanout nets" "" string {optional}} 
#@ { -threshold "high fanout threshold: value>=0" "threshold" string {optional}} 
#@ { -through_buf_inv "treat buffers and inverters as transparent -check for transitive fanout" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_ideal_nets -info "Returns all ideal nets" -define_args { 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_inputs -info "return input ports" -define_args { 
#@ { -clock "ports with input delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive input delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive input delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_outputs -info "return output ports" -define_args { 
#@ { -clock "ports with output delay relative to clock" "clock" string {optional}} 
#@ { -edge_triggered "ports with non-level-sensitive output delay" "" string {optional}} 
#@ { -level_sensitive "ports with level-sensitive output delay" "" string {optional}} 
#@ }
#@ define_proc_attributes all_threestate -info "Returns all threestate objects" -define_args { 
#@ { -nets "threestate nets" "" string {optional}} 
#@ { "" "objects patterns OR collection" "arguments" string {optional}} 
#@ }
#@ define_proc_attributes all_dont_touch -info "Returns all dont touch objects" -define_args { 
#@ { -nets "Dont touch nets" "" string {optional}} 
#@ { -cells "Dont touch cells" "" string {optional}} 
#@ { "" "Dont touch patterns OR collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_size_only_cells -info "Returns all size_only cells" -define_args { 
#@ { "" "Object patterns OD collections" "patterns" string {optional}} 
#@ }
#@ define_proc_attributes all_clocks -info "return all clocks in the current design"  
#@ define_proc_attributes all_designs -info "return all designs" 
#@ define_proc_attributes all_registers  -info "create a collection of register cells or pins" -define_args { 
#@ { -no_hierarchy "only search the top level of hierarchy" "" string {optional}} 
#@ {-rise_clock "return registers triggered by rise edge of this clock" "rise_clock" string {optional}}
#@ {-fall_clock "return registers triggered by rise edge of this clock" "fall_clock" string {optional}}
#@ { -clock "return registers of this clock" "clock" string {optional}} 
#@ { -cells "return cells - this is the default" "" string {optional}} 
#@ { -data_pins "return data_pins" "" string {optional}} 
#@ { -clock_pins "return clock_pins" "" string {optional}} 
#@ { -slave_clock_pins "return slave_clock_pin" "" string {optional}} 
#@ { -inverted_output "return FF's with inverted output phase" "" string {optional}} 
#@ { -output_pins "return output_pins" "" string {optional}} 
#@ { -level_sensitive "only consider level sensitive registers" "" string {optional}} 
#@ { -edge_triggered "only consider edge triggered register" "" string {optional}} 
#@ { -master_slave "only consider master/slave registers" "" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_cells -info "return critical cells" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ }
#@ define_proc_attributes all_critical_pins -info "return critical pins" -define_args { 
#@ { -slack_range "critical range to select cells:value>=0" "range_value" string {optional}} 
#@ { -type "pintype: Values: endpoint, startpoint" "pin_type" string {optional}} 
#@ }
#@ define_proc_attributes get_magnet_cells -info "return magnet cells collection" -define_args {
#@ { -stop_by_sequential_cells "don't pull sequential cells" "" string {optional}} 
#@ { -exclude_buffers "skip through buffers in levels" "" string {optional}} 
#@ { -exclude_cells "list of excluded cells list" "" string {optional}}
#@ { -logical_level "number of logical levels to pull for placement" "integer" string {optional}} 
#@ { -stop_points "list of stop points where to stop magnetizing paths" "object_list" list {optional}} 
#@ { "" "a list of magnet objects" "magnet_objects" list {optional}} 
#@ }
#@ define_proc_attributes all_fanout -info "return pins or cells in transitive fanout" -define_args {
#@ {-clock_tree "return all clock tree components in design" "" string {optional}}
#@ {-from "set of source ports, pins, or nets" "source_list" list {optional}}
#@ {-endpoints_only "return only the timing endpoints" "" string {optional}}
#@ {-exclude_bboxes "black-boxes are not included in return-set" "" string {optional}}
#@ {-break_on_bboxes "traversal stops at black-boxes" "" string {optional}}
#@ {-only_cells "only cells are included in the return-set" "" string {optional}}
#@ {-flat "trace entire design instead of just current hierarchy" "" string {optional}}
#@ {-levels "maximum number of levels of logic to traverse" "n" string {optional}}
#@ {-trace_arcs "Type of network arcs to trace. Values: timing, all" "arc_type" string {optional}}
#@ }
#@ define_proc_attributes all_physical_only_ports -info " Get the collection of physical only ports" -define_args {
#@ {"" "list of cell name patterns and collections" "arguments" list {optional}}
#@ }
#@ define_proc_attributes get_matching_nets_for_pattern -info "Get matched nets for a certain net pattern" -define_args { 
#@ { -pattern "pattern id" "integer" string {optional}} 
#@ { -optimizable "Return all nets that can be optimized" "" string {optional}} 
#@ { -transition_lower_limit "nets with transition equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -transition_upper_limit "nets with transition less than upper limit" "upper_limit" string {optional}} 
#@ { -setup_slack_lower_limit "nets with slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -setup_slack_upper_limit "nets with slack less than upper limit" "upper_limit" string {optional}} 
#@ { -hold_slack_lower_limit "nets with hold slack equal or greater than lower limit" "lower_limit" string {optional}} 
#@ { -hold_slack_upper_limit "nets with hold slack less than upper limit" "upper_limit" string {optional}} 
#@ }
#@ # -- End source /packages/synopsys/icc/O-2018.06-SP4/auxx/syn/all_command_option_def.tcl

#@ 
#@ ##read_def -verbose /Users/students/dennison/asic_flow_setup_orig/dc_synth/synth_Project/output/scan.def
#@ ##read_def -verbose /Users/students/dennison/asic_flow_setup_orig/dc_synth/synth_Project/output/scan.def
#@ 
#@ save_mw_cel -as Project_initial
#@ 
#@ 
#@ create_floorplan -control_type aspect_ratio -core_aspect_ratio 1 -core_utilization .70  -row_core_ratio 1  -start_first_row -left_io2core 5.0 -bottom_io2core 5.0 -right_io2core 5.0 -top_io2core 5.0 
#@ 
#@ 
#@ derive_pg_connection -power_net VDD -ground_net VSS
#@ derive_pg_connection -power_net VDD -ground_net VSS -tie
#@ 
#@ ##Create VSS ring
#@ 
#@ create_rectangular_rings  -nets  {VSS}  -left_offset 0.5  -left_segment_layer M6 -left_segment_width 1.0 -extend_ll -extend_lh -right_offset 0.5 -right_segment_layer M6 -right_segment_width 1.0 -extend_rl -extend_rh -bottom_offset 0.5  -bottom_segment_layer  M7 -bottom_segment_width 1.0 -extend_bl -extend_bh -top_offset 0.5 -top_segment_layer M7 -top_segment_width 1.0 -extend_tl -extend_th
#@ 
#@ ## Create VDD Ring
#@ 
#@ create_rectangular_rings  -nets  {VDD}  -left_offset 1.8  -left_segment_layer M6 -left_segment_width 1.0 -extend_ll -extend_lh -right_offset 1.8 -right_segment_layer M6 -right_segment_width 1.0 -extend_rl -extend_rh -bottom_offset 1.8  -bottom_segment_layer M7 -bottom_segment_width 1.0 -extend_bl -extend_bh -top_offset 1.8 -top_segment_layer M7 -top_segment_width 1.0 -extend_tl -extend_th
#@ 
#@ ## Creates Power Strap 
#@ 
#@ create_power_strap -nets { VDD } -layer M6 -direction vertical -width 3  
#@ create_power_strap -nets { VSS } -layer M6 -direction vertical  -width 3
#@ 
#@ verify_drc
#@ ## Save the design
#@ 
#@ 
#@ set_case_analysis 0 scanEn
#@ write_def -output output/Project_fp.def
#@ save_mw_cel -as Project_design
#@ 
#@ puts "floorplan done!!!!!"
#@ 
#@ 
#@ 
#@ ###########################################################################
#@ ### Placement
#@ ###########################################################################
#@ 
#@ set_buffer_opt_strategy -effort high
#@ 
#@ set_tlu_plus_files -max_tluplus /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_1p9m_Cmax.tluplus -min_tluplus /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_1p9m_Cmin.tluplus  -tech2itf_map /packages/process_kit/generic/generic_32nm/SAED32_EDK/tech/star_rcxt/saed32nm_tf_itf_tluplus.map
#@ 
#@ 
#@ ##Goto Layout Window , Placement ' Core Placement and Optimization .  A new window opens up as shown below . There are various options, you can click on what ever option you want and say ok. The tool will do the placement. Alternatively you can also run at the command at icc_shell . Below is example with congestion option.
#@ 
#@ 
#@ place_opt -consider_scan
#@ clock_opt -only_psyn
#@ 
#@ save_mw_cel -as Project_place
#@ 
#@ ### Reports 
#@ 
#@ write_def -output output/Project_place.def
#@ report_placement_utilization > output/Project_place_util.rpt
#@ report_qor_snapshot > output/Project_place_qor_snapshot.rpt
#@ report_qor > output/Project_place_qor.rpt
#@ 
#@ ### Timing Report
#@ 
#@ report_timing -delay max -max_paths 20 > output/Project_place.setup.rpt
#@ ##set_case_analysis 1 scanEn
#@ report_timing -delay min -max_paths 20 > output/Project_place.hold.rpt
#@ 
#@ 
#@ ###########################################################################
#@ ### Clock Tree Synthesis
#@ ###########################################################################
#@ 
#@ ##In the Layout window, click on "Clock ", you will see various options, you can set any of the options to run CTS. If you click on Clock ' Core CTS and Optimization
#@ 
#@ ##Save the Cell and report timing
#@ ##setup_time fix
#@ clock_opt -only_cts
#@ 
#@ 
#@ save_mw_cel -as Project_cts
#@ report_placement_utilization > reports/Project_cts_util.rpt
#@ report_qor_snapshot > reports/Project_cts_qor_snapshot.rpt
#@ report_qor > reports/Project_cts_qor.rpt
#@ ##set_case_analysis 0 scanEn
#@ report_timing -max_paths 20 -delay max > reports/Project_cts.setup.rpt
#@ ##set_case_analysis 1 scanEn
#@ report_timing -max_paths 20 -delay min > reports/Project_cts.hold.rpt
#@ 
#@ ## clock_opt -only_psyn ##
#@ clock_opt -sizing
#@ ## hold_time fix
#@ ## clock_opt -only_hold_time
#@ ## Save cel again and report paths
#@ save_mw_cel -as Project_cts_opt
#@ ### Timing Report
#@ report_timing -delay max -max_paths 20 > reports/Project_cts_opt.setup.rpt report_timing
#@ -delay min -max_paths 20 > reports/Project_cts_opt.hold.rpt
#@ 
#@ ###########################################################################
#@ ### Routing
#@ ###########################################################################
#@ 
#@ ##In the layout window, click on Route -> Core Routing and Optimization
#@ 
#@ route_opt 
#@ 
#@ ##Save the cel and report timing
#@ 
#@ save_mw_cel -as mProject_route
#@ write_def -output output/Project_route.def
#@ report_placement_utilization > reports/Project_route_util.rpt
#@ report_qor_snapshot > reports/Project_route_qor_snapshot.rpt
#@ report_qor > reports/Project_route_qor.rpt
#@ report_timing -max_paths 20 -delay max > reports/Project_route.setup.rpt
#@ report_timing -max_paths 20 -delay min > reports/Project_route.hold.rpt
#@ 
#@ ##POST ROUTE OPTIMIZATION STEPS
#@ 
#@ ##Goto Layout Window, Route -> Verify Route
#@ 
#@ 
#@ ###########################################################################
#@ ### Extraction
#@ ###########################################################################
#@ 
#@ ##Go to Layout Window, Route -> Extract RC, it opens up a new window as shown below, click ok. Alternatively, you can run this script on the ICC shell:
#@ 
#@ extract_rc  -coupling_cap  -routed_nets_only  -incremental
#@ 
#@ ##write parasitic to a file for delay calculations tools (e.g PrimeTime).
#@ write_parasitics -output ./output/Project_extracted.spef -format SPEF
#@ 
#@ ##Write Standard Delay Format (SDF) back-annotation file
#@ write_sdf ./output/Project_extracted.sdf
#@ 
#@ ##Write out a script in Synopsys Design Constraints format
#@ write_sdc ./const/Project_extracted.sdc -version 2.0
#@ 
#@ ##Write out a hierarchical Verilog file for the current design, extracted from layout
#@ write_verilog ./output/Project_extracted.v
#@ 
#@ ##Save the cel and report timing
#@ report_timing -max_paths 20 -delay max > reports/Project_extracted.setup.rpt
#@ report_timing -max_paths 20 -delay min > reports/Project_extracted.hold.rpt
#@ 
#@ report_power > reports/Project_power.rpt
#@ 
#@ check_design > reports/Project_DRC.rpt
#@ 
#@ save_mw_cel -as Project_extracted
#@ 
#@ # -- End source /courses/engr852/engr852-10/asic_flow_setup/pnr/pnr_project/scripts/physical_design_icc.tcl

quit
